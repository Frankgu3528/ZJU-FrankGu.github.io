<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>把照片做成了手机壁纸</title>
      <link href="/2023/11/14/%E6%8A%8A%E7%85%A7%E7%89%87%E5%81%9A%E6%88%90%E4%BA%86%E6%89%8B%E6%9C%BA%E5%A3%81%E7%BA%B8/"/>
      <url>/2023/11/14/%E6%8A%8A%E7%85%A7%E7%89%87%E5%81%9A%E6%88%90%E4%BA%86%E6%89%8B%E6%9C%BA%E5%A3%81%E7%BA%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935193933.png" alt="wallpaper-1699935193933"></p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935572032.png" alt="wallpaper-1699935572032"></p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935969431.png" alt="wallpaper-1699935969431"></p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935297416.png" alt="wallpaper-1699935297416"></p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935924186.png" alt="wallpaper-1699935924186"><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935864608.png" alt="wallpaper-1699935864608"><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935078238.png" alt="wallpaper-1699935078238"><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935252111.png" alt="wallpaper-1699935252111"><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699936209926.png" alt="wallpaper-1699936209926"><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935501903.png" alt="wallpaper-1699935501903"><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/wallpaper-1699935536528.png" alt="wallpaper-1699935536528"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>徒步夏塔古道</title>
      <link href="/2023/11/09/%E5%BE%92%E6%AD%A5%E5%A4%8F%E5%A1%94%E5%8F%A4%E9%81%93/"/>
      <url>/2023/11/09/%E5%BE%92%E6%AD%A5%E5%A4%8F%E5%A1%94%E5%8F%A4%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h2 id="夏塔古道"><a href="#夏塔古道" class="headerlink" title="夏塔古道"></a>夏塔古道</h2><p>夏塔景区是隐藏在天山深处的一处秘境，是新疆顶级的徒步道之一。这次特意多开了几百公里车，只为一睹夏塔女神的芳容。</p><p>前一天住在昭苏，可惜天公不作美，第二天醒来发现下着小雨，导致早上我们拖了很久才悻悻的起床，穿上最厚的冲锋衣，开车前往夏塔景区。</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/111.jpg" alt="111"></p><p>从昭苏到夏塔大概需要开1个小时车，期间很幸运的看见了昭苏麦垛（这个季节麦垛本应该已经装车运到城里去了）</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/11111.jpg" alt="11111"></p><p>景区下着小雨，淅淅沥沥地打在冲锋衣上，随时9月初，体感温度早已到了零度以下。下了接驳车，我们终于初步看清了夏塔的面貌，开始向着神山深处进发：</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/222222.jpg" alt="222222"></p><p>夏塔的路是人畜共道，在雨天泥泞不堪，不过相比晴天也是很别样的体验。</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/image-20231109210727696.png" alt="image-20231109210727696"></p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/%E6%9C%AA%E6%A0%87%E9%A2%98-1.jpg" alt="未标题-1">一路上周围都是壮阔的雪山，整个峡谷几乎就我们俩个背包客在行走：</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/222.jpg" alt="222"></p><p>夏塔古道穿过原始森林，直抵冰川脚下。据说周围有很多土拨鼠，可能是因为天气原因我们一只都没有看到，不过路边的枯树还是十分出片：</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/444.jpg" alt="444"></p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/3.jpg" alt="3"></p><p>路上也能看见很多村民和牲口，不过在新疆待了几天后我已经对牛羊见怪不怪了：</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/555.jpg" alt="555"></p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/666.jpg" alt="666"></p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/777.jpg" alt="777"></p><p>远处是巍峨的雪山，近处高耸的杉树如同权游里的守夜人一样守卫着神山，今夜如此，夜夜尽然。</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/888.jpg" alt="888"></p><p>行走在峡谷里，感受到人类的渺小，也有一种行走在欧洲小镇的感觉：</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/999.jpg" alt="999"></p><p>最后，在夏塔，我也拍到了这次旅行最满意的人生照片之一：</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/10.jpg" alt="10"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git设置</title>
      <link href="/2022/12/15/Git%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/12/15/Git%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Git设置"><a href="#Git设置" class="headerlink" title="Git设置"></a>Git设置</h1><blockquote><p>Git虽然强大，但个人感觉学习曲线还是很陡峭的……</p></blockquote><p>有时候我们用开了clash挂好了梯子，但还是经常出现git push显示<code>time out </code>的情况，原先我一直觉得是我的梯子不稳定，知道有一天我写好了文章却一晚上都<code>hexo d </code>不上去，于是花了点时间解决了一下。目前为之git的各项操作都畅通无阻，还没出现问题。</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/image-20221215120627765.png" alt="image-20221215120627765"></p><p>首先<strong>clash</strong>开放的是7890端口，我的git走的是https上传，但git的https却没有走这里，所以我们通过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line"></span><br><span class="line">git config --global https.proxy https://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>把git的代理改成clash的端口，改完了可以<code>git config -l</code>看看：</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/image-20221215121643334.png" alt="image-20221215121643334"></p><h3 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h3><p>注意clash这个A要关掉，clash默认随机开放端口的，会变来变去，要让他固定下来，然后让git走这个端口</p><p><img src="https://frank-first.oss-cn-hangzhou.aliyuncs.com/images/image-20221215121721588.png" alt="image-20221215121721588"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>托福回忆</title>
      <link href="/2022/11/28/%E6%89%98%E7%A6%8F%E5%9B%9E%E5%BF%86/"/>
      <url>/2022/11/28/%E6%89%98%E7%A6%8F%E5%9B%9E%E5%BF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h3><p>英语基础应该还不错，但很久没有接触的英语的懒惰抱佛脚选手。（主要知道两年有效期的话肯定还要再考过）<br>四级六级均是610+左右。单词量应该中规中矩吧。</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>自从考完期中考就一直很懒，每天最多就是去扇贝背10分钟单词。考前一周逐渐开始抱佛脚，大概听力做了三四篇TPO，阅读按模考了一次发现还不错就没怎么看了（<del>主要没时间了</del>），考前最慌的主要是口语和写作。<br>口语的话第一个task每次基本只能想到一个理由，拿着TPO练了一下差不多思路打开了点，又看到的口语练了一波，感觉差不多能考试了（主要这道题题目千奇百怪和发音也不能一下子练好），后面几个task看了看题型，象征性的练了一练。作文也是看了一下形式，背了几句模板差不多就上了。</p><h3 id="考试回忆"><a href="#考试回忆" class="headerlink" title="考试回忆"></a>考试回忆</h3><p>前一天晚上吃了块奶油蛋糕，恶心了好久，晚上还去社团内训，大概九点多在大风中练了会口语，回来玩手机到12：00睡觉。<br>大概7:50在zjg打车，打车一下来就是考点门口（不要打错了！），有很多工作人员。<br>这里碰到一个岔子，lz忘记打印一个健康承诺书了，当时已经8:20，差点吓死，幸好门口的工作人员有备份，现场填完就放我进去了。进去以后是存包，然后有个大教室可以让你放水和食物（待会休息的时候可以来这里），然后就是安检进考场。看经验贴说进去考场就没人管戴不戴口罩了，但lz这次做阅读的时候摘下了口罩，还被监考员要求带上，莫非是这几天疫情又严重了？<br>上来就是阅读加试，好在刚开始还算冷静，知道平时经常做不完，压着点做完了四篇阅读，开听听力的时候有点烦躁了，有点静不下来，忍着尿意做完，奇怪的是听最后一篇听力的时候居然有人在口语了，还分了一下心。（顺便吐槽一下小站托福上的阅读模考，明明现在都是要求18分钟一篇，它还是20分钟一篇）<br>正常休息，上厕所。（这里有学长说可以前面拖点时间，这样可以听到别人口语在说什么来准备一下，不过lz太紧张了没听到别人怎么样）回来口语第一题问你喜欢原先的打牌还是现在的玩电子游戏消遣，感觉有点似曾相识？后面几个task几乎没准备，基本答的很一般。<del>有一个还没怎么答完。</del><br>话说考前从没写完过一篇作文，这次第一篇讲一个azore island，感觉中规中矩<br>大作文是有一笔public money，是用来造图书馆还是修公交好呢，这篇在xhd做过，可惜回忆起来很少，马马虎虎造完了。（考试时用的键盘是薄膜键盘，键程较短，上面有薄膜；看到98上说可以把键盘从抽屉里拿出来，而且lz还撕掉了薄膜，实测没什么问题，另外打字速度确实也挺重要）</p><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><ul><li><strong>词汇量</strong>这个东西肯定是多多益善。lz高考完就大概想起来了去扇贝背下单词？感觉单词量不是很多，但感觉考下来勉强够用。（感觉单词量最主要的帮助是阅读里的词汇题和阅读的速度），慢慢背单词吧。</li><li><strong>听力</strong>和<strong>阅读</strong>感觉是我们中国学生擅长的部分，lz这次虽然几乎没怎么准备但也还行。下次考前可以抽出时间多刷题，应该问题不是很大。（感觉看看美剧什么挺轻松愉快也挺有帮助的）</li><li><strong>口语</strong>的话感觉应试技巧挺重要的。口音的话一是比较难提升，二是感觉托福只要口音不是太离谱应该问题也不大？限时也很重要，要在限时内瞬间发散出几个点，然后回答还是挺需要训练的。当然发散只是针对第一个task，后面几个都是考验听力和迅速记忆的能力。应该也是考刷题吧。</li><li><strong>写作</strong>的话暂时没什么想说的。考下来感觉自己打字速度稍慢，而且感觉大作文写不长？应该是不大会发散思维还有本身写作能力不够，下次再说吧。<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3>感谢cc98上的很多经验贴，给了我很多帮助。以下仅仅是部分。<br><a href="https://www.cc98.org/topic/5469354">https://www.cc98.org/topic/5469354</a><br><a href="https://www.cc98.org/topic/5370702">https://www.cc98.org/topic/5370702</a><br><a href="https://www.cc98.org/topic/5079843">https://www.cc98.org/topic/5079843</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 回忆&amp;总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2022暑假不完全总结</title>
      <link href="/2022/09/04/2022%E6%9A%91%E5%81%87%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2022/09/04/2022%E6%9A%91%E5%81%87%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="生活-2022-暑假总结"><a href="#生活-2022-暑假总结" class="headerlink" title="[生活] 2022 暑假总结"></a>[生活] 2022 暑假总结</h1><h3 id="摸鱼方面"><a href="#摸鱼方面" class="headerlink" title="摸鱼方面"></a>摸鱼方面</h3><h4 id="游戏篇"><a href="#游戏篇" class="headerlink" title="游戏篇"></a>游戏篇</h4><p>原神：已经到了长草期，动不动将近10个G的更新文件实在消磨我的热情，新地图也没能让我提起兴趣。整个暑假上号次数一只手数的过来，放在平常这可是我一天的量（笑）。</p><p>球球大作战：初中时玩过的游戏，当时也耗费了好多精力。和同学出去玩的时候发现有一个朋友在玩，于是大家纷纷下载一起玩。可惜我只能找回原来的小号，大部分时候换来的只是生疏的手法和被治好的高血压（乐）。</p><p>双扣&amp;UNO：去旅游时候的主要娱乐项目，几天的旅游牌技倒是熟练了很多。</p><h4 id="番-x2F-电影-x2F-书"><a href="#番-x2F-电影-x2F-书" class="headerlink" title="番&#x2F;电影&#x2F;书"></a>番&#x2F;电影&#x2F;书</h4><p>主要看完了《鬼灭之刃》，十分好看的番，甚至花了两三天剪了一个视频 (<a href="https://www.bilibili.com/video/BV1iG411471x?spm_id_from=333.999.0.0&vd_source=7dcda248e16142ad5a30747514b5afce">链接在这</a>)。</p><h3 id="学习-x2F-技术方面"><a href="#学习-x2F-技术方面" class="headerlink" title="学习&#x2F;技术方面"></a>学习&#x2F;技术方面</h3><h4 id="前期"><a href="#前期" class="headerlink" title="前期"></a>前期</h4><p>刚放暑假（准确说是还没放）的时候列了一个宏伟的计划，估计是受<a href="https://csdiy.wiki/">csdiy</a>的影响，尝试多开很多课一起学，但结果就是啥也没学会。</p><p>考完主要的考试时候看了一下missing semester和CS61A,前者主要讲一些cs学习中的工具使用，折磨人的印度口音加上与数学软件有重叠所以就没看下去了，后者主要是Python，但想到下学期要学C++就有点没看下去的兴致。</p><p>刚放假的时候认真看了一下吴恩达的机器学习，虽然就看了前两章，不过还是很认真的，记了不少笔记也学了不少东西。</p><h4 id="中后期"><a href="#中后期" class="headerlink" title="中后期"></a>中后期</h4><p>主要是学习c++。</p><p>说实话在学c++的路上真的走了很多弯路（上来就推荐直接啃primmer的是认真的么）。由于没学过c小&#x2F;c大，我对这门语言一无所知，并且why老师一直在散布焦虑，所以学的决心倒是很坚定，不过估计也就剩这个了。</p><p>总结来说一开始选了《21天学懂c++》+ b站上黑马的课来简单知道语法，不得不说这两样东西真的很适合零基础上手。（<del>不过后来发现好像学ds不需要那么多语法，会写for循环就能上了</del>）</p><p>大致会了一点后迷茫了好久（其实是到处踩坑），中间跟了清华邓公&#x2F;浙大cy的课一段时间，不过刚学完语法就硬啃属实难为我了。而且没啥练习题能实操导致学的非常浅。（又想起初中学oi时听天书的恐惧感）</p><p>8月末去长沙玩了几天，回来就9月了。突然发现LeetCode上有个叫Leetbook的东西，跟着刷了一波题……emmm感觉应该早点发现，毕竟数据结构就是做算法题嘛。</p><h4 id="托福"><a href="#托福" class="headerlink" title="托福"></a>托福</h4><p>去杭州线下学了两周，xhd的老师水平还是挺棒的，课程质量也比我想象的高~</p><p>但可能当时没有坚定考托福的决心，反正就是一路划水~唯一的收获估计是一大堆送的资料（乐）。</p><h3 id="兴趣-x2F-爱好方面"><a href="#兴趣-x2F-爱好方面" class="headerlink" title="兴趣&#x2F;爱好方面"></a>兴趣&#x2F;爱好方面</h3><p>不知是上了大学时间比较多还是这个暑假实在太长，周围人不约而同的重拾起儿时的爱好。</p><h4 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h4><p>本以为小学买的佳能单反已经报废得差不多了，没想到居然还能用。一开始就东拍西拍，在认真拍了一次星空后，又回到了摄影这个坑里来。</p><p><img src="/2022/09/04/2022%E6%9A%91%E5%81%87%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%80%BB%E7%BB%93/2022%E6%9A%91%E5%81%87%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%80%BB%E7%BB%93%5C350-2.png"></p><p>后来借着旅游的名义又升级了尼康Z5微单，期间也接触到调色，各种相机参数&#x2F;图片的色彩参数……</p><p>（~~好看的照片没几张，知道的参数却一大堆……是我没错了）</p><h4 id="剪视频"><a href="#剪视频" class="headerlink" title="剪视频"></a>剪视频</h4><p>起因是五一的时候刚入了无人机，想模仿油管上的创意剪一个片段，当时对着刚下的剪映折腾了好久才弄出一个不能看的半成品。</p><p>后来越来越多的接触到一些新的有趣的视频，电脑上也慢慢多了PR，达芬奇等一众软件。</p><p><a href="https://space.bilibili.com/1229290077?spm_id_from=333.1007.0.0">戳这</a>看我的B站主页~当然还有一些有意思的视频不大方便放上去。</p>]]></content>
      
      
      <categories>
          
          <category> 回忆&amp;总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记软件评测</title>
      <link href="/2022/06/23/%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B/"/>
      <url>/2022/06/23/%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记软件评测-x2F-推荐"><a href="#笔记软件评测-x2F-推荐" class="headerlink" title="笔记软件评测&#x2F;推荐"></a>笔记软件评测&#x2F;推荐</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>刚考完几门硬课，下一门课又还早。闲着无事遂开个贴评测一下接触过的笔记软件。<br>首先本人是理工科的学生，对笔记软件对公式和代码的支持比较看重，而对于一些类似手账的华丽的笔记没什么需求。另外接触笔记软件的时间不长，本篇文章也纯属个人见解，权当抛砖引玉了，也欢迎交流。</p><hr><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>最好用的Markdown编辑器（个人觉得没有之一），也似乎是周围同学用的最多的，感觉把Markdown做到了极致的软件，如果单纯的写Markdown绝对是不二选择。笔记都以.md文件保存在本地，十分安全和便于管理。<br>界面很舒服，有丰富的主题来美化，甚至可以用css代码来定制成任何样子。<br>缺点是功能比较少，搜索，管理不完善。<br>Ps：typora现在开始收费了，不过想想总能有办法的。<br><a href="https://www.cc98.org/topic/5321363">这有一篇当年的十大帖</a></p><hr><h3 id="语雀"><a href="#语雀" class="headerlink" title="语雀"></a>语雀</h3><p>很好用的跨平台的笔记平台。有网页版也可以下载桌面版，同步功能十分的快且好用。<br>功能十分强大，思维导图，优美的代码块，可以插入b站视频……<br>有知识库和发布功能，可以很方便的多人写作。<br>缺点是不在本地，不是很舒服；依赖第三方公司，有黑化风险；感觉文件的管理不是很舒服（纯个人感觉）</p><hr><h3 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h3><p>上线最早的笔记软件，在中国注册量十分大，有很好的群众基础。<br>缺点是最近几年已黑化，各种让开VIP等操作让大多数人弃用。<br>只是下载了没怎么用过不多评价。</p><hr><h3 id="obsidian"><a href="#obsidian" class="headerlink" title="obsidian"></a>obsidian</h3><p>风格很类似typora，也是在本地以.md文件存储，但加入了很多功能。同样有很丰富的主题来美化，在typora不完善的搜索和思维导图等地方也进一步完善。有很多新的功能，比如obs的特色：知识图谱和双向链接，<del>虽然可能真正的用处不大</del>。有丰富的第三方插件，目前也是在不断的更新完善中，未来可期。<br>缺点：同步和发布要收费，虽然也有一些解决方案，但还是不是很完美。（在这方面语雀yyds！）Markdown上一些细节不是很舒服，比如插入图片的缩放（这个在typora里就很舒服）<br><a href="https://www.cc98.org/topic/5332436">98上有一篇详细的介绍obs的帖子</a></p><hr><h3 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a>有道云笔记</h3><p>也是很早就有的笔记软件，个人感觉有道的产品还是可以的。<br>风格类似语雀，同步功能同样完善。而且画思维导图，插入表情等十分方便。<br>缺点：不知道pc端感觉十分臃肿，每次打开都要很久，严重降低使用体验！另外虽然支持Markdown，但不支持实时预览，用起来十分难受。在同步功能上似乎也有一定的bug。<br>曾经使用过有道云一段时间，现在已经弃用了，感觉被语雀几乎全方位压制了。</p><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><strong>joplin：</strong> 感觉跟obsidian应该是同个类型的，也有很丰富的插件，但好像用的人不是很多。</li><li><strong>vscode：</strong> 作为万能的编辑器，我确实用过vscode作为一段时间的笔记软件。不过当时刚接触Markdown，也不知道有啥其他的编辑器……vsc作为编辑器唯一的好处就是方便了吧，写代码笔记的时候不用再打开另外一个软件（没有实时预览是一个很难受的点）。</li><li><strong>onenote：</strong> 微软的产品，在多设备协同上做的似乎挺好，我的数学老师就用的这个讲课。不过似乎对Markdown和代码支持不是很好，所以也没用过。</li><li><strong>notion：</strong> 大名鼎鼎的笔记软件，在小红书和b站上都有非常多的视频。页面精美，有极高的可定制性（折腾），有点类似于做手账的感觉。但似乎由于服务器在国外，经常会遇到网络问题。没用过不多评价。</li></ul><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>个人感觉笔记软件分为两类：一种是以.md形式存储在本地，一种是类似语雀等存储在云端。<br><strong>前者</strong>类似于一个编辑器，大多能自定义主题，风格等，也比较安全，隐患较少，缺点是在同步和分享方面基本都不是很好，而且功能也没有第二类的那么丰富。<br><strong>后者</strong>最大的好处就是随时共享，同步，整体上也很轻量，功能丰富。但对Markdown和代码的友好性一般没有前者好，而且由于存储在云端，依赖第三方平台，文章隐私可能有问题（一个朋友说他写的东西甚至直接被ban了）；第三方平台有“黑化”风险，如投放大量广告，如不停的推出VIP制度来割韭菜，如限制上传容量，这都是潜在的隐患。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网站の食用手册</title>
      <link href="/2022/06/04/%E7%BD%91%E7%AB%99%E3%81%AE%E9%A3%9F%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2022/06/04/%E7%BD%91%E7%AB%99%E3%81%AE%E9%A3%9F%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="网站の食用手册"><a href="#网站の食用手册" class="headerlink" title="网站の食用手册"></a>网站の食用手册</h1><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li><big>网站本身是基于PC端开发的，在手机上页面会变得比较奇怪，一些特效也会显示不出来（</big></li><li><big>右上角的 ”About me” 是一个简单的自我介绍， 原因是每次自我介绍我都会变哑巴。</big></li><li><big><del>遇到各种各样的bug那都是正常现象</del></big></li></ol><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><big>Q. 为什么写这个网站？</big></p><p><big>A. 起初看到几位同学&amp;学长的博客（没经过他们同意就不把他们的放在这了），一开始只是简单浏览了里面的内容，后来某天突发奇想：我为什么不也搞一个呢？于是在连肝了几个晚上后就有了现在的样子。</big></p><hr><p><big>A. 花了多久啊（&gt;_&lt;)</big></p><p><big>Q. 建站初期恰逢刚考完期中考，连着几个晚上都在解决一些bug和熟悉这个框架。后来就是一些无止境的美化了，努力把它变成看着更顺眼的样子。</big></p><p><big>再后来因为技术力比较菜，写不出啥文章来……乐</big></p><hr><p><big>Q. 这个网站是怎么实现的捏？</big></p><p><big>A. 首先其实搭建这样一个博客比想象中简单好多，大部分工作都是站在前人的肩膀上完成的, 并不需要什么cs方面的知识。</big></p><p><big>首先关于服务器，这个网站是借助GitHub实现的，万能的GitHub有专门的功能可以帮助建立一个简陋的Pages。</big></p><p><big>然后我选用的是hexo框架，配合Git用ssh连接到自己的GitHub账号后，可以通过类似命令行的方式一键把本地写的东西推到网页上，<del>对我这样的小白来说十分神奇</del>。</big></p><p><big>关于网站的美化，网上有很多基于hexo框架定制的主题，基本都有很详细的说明文档。当然有些不满意的地方我写了点css来使其变成我想要的样子。</big></p><p><big>QAQ. 差不多就是这样子了，<del>其实我应该单独写篇文章的</del>。</big></p><hr><p><big>A. 以后会更新啥？</big></p><p><big>Q. 其实当时做这个博客的初衷就是用一种华丽呼哨的方式记录我觉得有趣的or经历的一些事情。</big></p><p><big>后续应该会写一些学习上或技术上的知识&amp;经验，也会写一些学期总结or上过的课的感受。（主要是看到隔壁计院有很多分享帖，但数院似乎不多，导致在选课和规划上遇到很多纠结的地方……）</big></p><p><big>当然，受制于时间原因以及有限的水平，文章都十分粗浅（以及漏洞百出？）大佬们看到就图一乐or私戳跟我交流哦<del>（随时欢迎哦</del>）</big></p><p><big>似乎写在公众号上受众会更广一些？<del>当然是受不了秀米那个奇奇怪怪的编辑器</del>。</big></p><h2 id="更上一层楼"><a href="#更上一层楼" class="headerlink" title="更上一层楼"></a>更上一层楼</h2><p><big>虽然花了很久，但感觉还是有点意义的，至少有点像模像样的了……</big></p><p><big>首先就是搭博客本身的收获。逼着我去翻文档，去学习各种可能老师很少教的知识。比如Git，比如一些简单的css，HTML语言的编写，一些奇奇怪怪的知识（ssh，ping，dns等),  <del>原来前端还是挺有意思的嘛</del>。</big></p><p><big>另外（单方面）认识了一些佬们。他们有的有光辉的竞赛经历，有的在b站上有几万粉丝。明明大家都是同龄人，却让我有种“人类进化又不带上我” 的感觉orz。</big></p><p><big>还有就是拉了几位小伙伴进这个大坑（乐），想想他们也会经历一遍面对文档束手无策的样子就开始面带微笑（乐）。Anyway, 期待一波吧~</big></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim介绍</title>
      <link href="/2022/05/27/vim%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/05/27/vim%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="vim的使用"><a href="#vim的使用" class="headerlink" title="vim的使用"></a>vim的使用</h1><p>关于vim，江湖上流传着它的传说，有人说它是神的编辑器，有人说它是编辑器的神，也有人说他就是垃圾。不管怎样，安装好vim开始折腾吧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-install vim</span><br></pre></td></tr></table></figure><h2 id="编写第一个程序"><a href="#编写第一个程序" class="headerlink" title="编写第一个程序"></a>编写第一个程序</h2><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><p>重点介绍一下怎么写在Linux下写出一个hello world程序。</p><p>c++有很多编译器可供选择，大名鼎鼎的gcc&#x2F;g++，另外还有clang，msvc等。一般用g++来编译c++程序，gcc理论上应该也可以，但实际使用下似乎有点问题。</p><p>Linux似乎预装了gcc编译器，但g++似乎要手动下。在Ubuntu下似乎用apt就能安装。</p><p><strong>做好了准备工作，那么我们开始吧</strong>！</p><p>首先在vim下新建一个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello.cpp</span><br></pre></td></tr></table></figure><p>进入vim后是普通的模式，按i进入插入模式进行编辑，写一个简单的cpp程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">        cout&lt;&lt;&quot;hello world&quot;&lt;&lt;endl;</span><br><span class="line">        return 0;</span><br><span class="line">&#125;                           </span><br></pre></td></tr></table></figure><p>按esc退出插入模式，按：进入尾行模式，按wq进行保存并退出。</p><p>这样就回到了终端中，可以输入ls查看文件目录，发现多了hello.cpp文件。</p><p>接着用g++编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ hello.cpp</span><br></pre></td></tr></table></figure><p>如果没有报错就说明没有问题。在输入ls命令，可以看到目录下多了a.out文件，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out</span><br></pre></td></tr></table></figure><p>执行文件，即可出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>Ubuntu内置了Python。命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br></pre></td></tr></table></figure><p>可查看安装的版本。（Ubuntu22.04似乎内置了Python 3.10.4）</p><p>类似C++，我们可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim hello.py</span><br><span class="line"># 写你的程序</span><br><span class="line">python3 hello.py</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure><p>来得到输出。</p><h2 id="更上一层楼"><a href="#更上一层楼" class="headerlink" title="更上一层楼"></a>更上一层楼</h2><p>vim的魅力远不在此。通过修改配置文件，你可以将vim定制成任何你想要的样子，以及按你的习惯修改各种操作, 这可以让你远离鼠标。</p><p>此处不在一一介绍，不过以下是一些可以折腾的地方。</p><ol><li>修改键位。(强烈建议把大写锁定键映射成esc，这个键占了键盘的黄金键位但用处很少)</li><li>熟悉vim的几种模式</li><li>熟悉vim的快捷键，比如可以通过shift+a快速调到行的末尾。</li><li><del>美化vim</del>（逃）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux系列</title>
      <link href="/2022/05/27/Linux%E7%B3%BB%E5%88%97/"/>
      <url>/2022/05/27/Linux%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>听学姐说数院的小学期要学Linux，作为（**<del>超爱折磨自己的Linux爱好者</del>**）狂喜，遂写了这篇blog，旨在记录一下自己的折腾经历，也帮以后入坑的朋友们少踩点坑。</p><h3 id="警告（Warning）"><a href="#警告（Warning）" class="headerlink" title="警告（Warning）"></a>警告（Warning）</h3><p>如果你没有折腾过电脑的经历（比如连Windows的cmd都不知道怎么打开），折腾Linux对你或许有点痛苦，please做好心理准备……</p><h3 id="扫盲"><a href="#扫盲" class="headerlink" title="扫盲"></a>扫盲</h3><h3 id="what-is-linux？"><a href="#what-is-linux？" class="headerlink" title="what is linux？"></a>what is linux？</h3><p>linux 是一个操作系统（operating system）。最常见的操作系统就是Windows，大部分人从小接触的电脑都用的Windows，当然苹果是用的macos。</p><p><strong>linux有很多发行版</strong>：相当于一个娱乐公司（linux）下面有很多艺人（发行版）。Ubuntu是最常见的一个，其他还有deepin,arch……</p><p>操作系统就是让硬件与软件交互的东西。（我也不大会解释）</p><p>简单来说，操作系统由内核（kernel&lt;—-数院的学生应该会很熟悉这个词……），和外壳（shell）组成。</p><p>shell通常是一个黑框框，里面你可以输入一些指令，然后操作系统就会根据你的指令去干你要他干的事情。</p><p>windows 下的shell有cmd，powershell，git bash等，前两个你可以摁下win+R输入对应的名称，就会跳出一个框框。剩下一个要自己装。</p><p>装完Ubuntu后按Ctrl+alt+T 呼出Linux自带的bash (bash 应该就是shell的名字而已)</p><p>每个shell似乎都有自己的语法，但一般都是以linux的shell为准，里面可以干很多事情，不细说。你在装软件，blabla的时候一般都是通过在shell 里敲代码完成。所以如果要用明白，你要简单的知道一下shell的语法。</p><p><del>Windows下的shell都是阉割版，git bash 到几乎跟linux的shell差不多。</del></p><h3 id="介绍-Introduce"><a href="#介绍-Introduce" class="headerlink" title="介绍(Introduce)"></a>介绍(Introduce)</h3><p>Linux 是一个开源的操作系统，与我们平常用的Windows，macos有很多区别。linux爱好者似乎像信奉邪教一样，对Linux有种狂热的热爱。</p><p>不同于Windows把发行版命名为win7，win10，Linux不止有一家公司在维护（例如大名鼎鼎的Debian（大便）公司），所以发行版的名称也千奇百怪。比较著名的有：</p><p>Ubuntu（也是数院课用的），Deepin，Arch Linux，centos……</p><p>第一个Ubuntu是目前小白上手最多的方案，下面的教程都是基于Ubuntu。</p><h3 id="安装-Install"><a href="#安装-Install" class="headerlink" title="安装(Install)"></a>安装(Install)</h3><p><strong>前言：</strong></p><p>首先大部分人装Linux都不是一帆风顺的。操作系统是在硬件和不懂二进制的你之间构建一座桥（想进一步了解请移步：计院—操作系统），不同电脑的硬件不一样，对linux的兼容性也不一样，意为着你会遇到各种各样的问题。Anyway，我有三句真言送给你，请铭记在心：</p><p><img src="/2022/05/27/Linux%E7%B3%BB%E5%88%97/2.png"></p><p>主流（据我了解）有三种方案：</p><ol><li><p>在虚拟机中安装（初学者推荐），缺点是跑大的东西会比较卡，一般电脑都带不董。</p></li><li><p>安装双系统。好处是一步到位，坏处是比较折腾，而且新手第一次装容易崩。</p></li><li><p>wsl。听说很多人用这个，现在wsl也有了2.0版本，没用过不评价。</p></li></ol><p>这里我用的是第一种,安装的version是Vmware16+Ubuntu22.04。</p><p><strong>Tips：</strong></p><ol><li><p>建议安装最新版vmware，我一开始装的vm15兼容性出了很多问题，不得不卸载重装，而且这东西卸载巨麻烦……</p></li><li><p>Ubuntu最好不要像我一样装最新的……很多教程都是基于老版的，而且新版兼容性通常比老版差……18.04和20.04都很ok</p></li></ol><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>好了，我相信上面的问题肯定难不倒你，现在你已经看到那激动而性感的粉红色桌面了：（此处省略300字对壁纸的赞美）<img src="/2022/05/27/Linux%E7%B3%BB%E5%88%97/1.png"></p><p>OK，我们可以进行在开源的世界里遨游了！</p><p>现在我们来开启几个<strong>支线任务</strong>：</p><h3 id="后续："><a href="#后续：" class="headerlink" title="后续："></a>后续：</h3><p>抛弃了虚拟机，因为太卡了，不能完全发挥电脑的硬件能力……</p><p>有个非常厉害的朋友完全用Linux工作，这把我带进了大坑……于是折腾了好久的双系统，现在差不多能用了……</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大一上课程总结</title>
      <link href="/2022/05/23/%E5%A4%A7%E4%B8%80%E4%B8%8A%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/23/%E5%A4%A7%E4%B8%80%E4%B8%8A%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="大一上课程总结"><a href="#大一上课程总结" class="headerlink" title="大一上课程总结"></a>大一上课程总结</h1><h2 id="军训（2-0学分）"><a href="#军训（2-0学分）" class="headerlink" title="军训（2.0学分）"></a>军训（2.0学分）</h2><p>来到大学第一堂课，因为本人意志力不强还特别爱偷懒，没去参加合唱和分列式，喜提拉胯绩点。结合身边的人的绩点来看，似乎参加了上面一个或两个绩点就比较好看了。（<del>当然别的连似乎给分比较玄学</del>）</p><h2 id="公共经济分析导论（1-5通识）"><a href="#公共经济分析导论（1-5通识）" class="headerlink" title="公共经济分析导论（1.5通识）"></a>公共经济分析导论（1.5通识）</h2><p>首先必须吹一下这门课~上的zbm老师的课，其实课程内容还是有些无聊的，但老师十分擅长调动课堂气氛。导致每次翻ppt都惊叹于老师能把这么生硬的知识讲的那么生动……作业是每次听课后写听课感想，本人前几次还听得比较认真后面经常间歇性摸鱼。感觉老师给分还是比较仁慈的。</p><h2 id="西方音乐简史（1-5通识）"><a href="#西方音乐简史（1-5通识）" class="headerlink" title="西方音乐简史（1.5通识）"></a>西方音乐简史（1.5通识）</h2><p>冬学期的通识课，看到周围很多人就推荐就果断冲了。但没有音乐基础的理工男慎选。当然老师是好老师，疫情期间cl老师甚至在家里还给我们弹钢琴，考核是两个大作业+期末的听辨测试。本人自认为还是认真准备的，无奈木耳朵完全分不清不同音乐的区别，论文因为不大会对音乐进行赏析得分估计也不高，最后喜提3.3……</p><h2 id="大学英语四"><a href="#大学英语四" class="headerlink" title="大学英语四"></a>大学英语四</h2><p>因为某些神奇的原因，高考英语拉胯的我大一上就上了大英四。joy老师的课作业似乎特别少，老师似乎更注重课堂上的交流和讨论，总结来说体验还是很棒的。不出意料班上有很多大神，对刚抛出的问题就能立马产出一个很有逻辑的回答，口语也很native，让本人望尘莫及，<del>好在我们组水平并不是很强</del>。每次quiz前都会过一遍单词，最后正常考试，绩点也还行。</p><h2 id="篮球中级班（1-0分体育课）"><a href="#篮球中级班（1-0分体育课）" class="headerlink" title="篮球中级班（1.0分体育课）"></a>篮球中级班（1.0分体育课）</h2><p>本人从初中开始打篮球，来港后自然毫不犹豫地选了篮球课，抱着磨炼技术更多的是结交球友的心态。浙大的体育考核可谓十分复杂，不仅有网上智慧树，著名的12分钟跑，更奇葩的是由于疫情篮球的投篮竟然改成一篇小作文（<del>真是无力吐槽</del>）由于对篮球的热爱，即使这门课在周一早八，还是挺有收获的，金老师训练内容虽然多，但人还是非常好说话的。我最后一个月一直没法到课，老师一直很耐心地帮我补考，最后也差点满了……<br>多嘴一句，嘉年华是个好东西，听说随便水水就能拿两分，两分可能就是一档绩点啊。</p><h2 id="万物运行的奥秘（1-5学分通识）"><a href="#万物运行的奥秘（1-5学分通识）" class="headerlink" title="万物运行的奥秘（1.5学分通识）"></a>万物运行的奥秘（1.5学分通识）</h2><p>冬学期的一门通识课，由物理系的张寒洁老师授课。听着这正经的名字，其实这是一门相声课，老师几百Mb的ppt其实是由一个大标题加无数搞笑图片组成的。课程无比轻松，体验极其舒适。上课从不点名，想听就听，唯一的作业是写篇文章来写周围感兴趣的物理现象，考试是全英文（但可以带字典和历年卷），总体大家差不多，学过高中物理应该不会差到哪里去。本人作业很随意，考试也是当天下午才打印的资料，最后给分很好。<br><del>谁能想到时间花得最少的课既然绩点最高呢</del></p><h2 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h2><p>冬学期的课，也是这学期上过最愉快的课。认识了几个有趣的灵魂，最后的给分特别好，拿了4.5。唯一的缺点就是事情有点多，大作业5000+字加上最后的期末情景剧展示，两个任务都压在期末可真是要命，简直火葬场。<del>再也不拖ddl了</del>。但其实课程内容还是很有趣的，不像思修那么无趣。期间老师还请到了两个优秀学长来分享经验。总之，这门课让我学到了很多东西，认识了很多朋友，给分还巨好，太好了吧。</p><h2 id="大计基"><a href="#大计基" class="headerlink" title="大计基"></a>大计基</h2><p>不是需要码代码的专业上的计算机课，知识点很多且杂，看完后对计算机会有一个很好地认识，但因为涉猎的太多所以都是浅尝辄止。学习方法就是上课想干嘛干嘛，但不要漏下作业，期末前花时间刷点题和看书就行。（后来听说可以用c小加c大替换大计基加任何一门语言，很遗憾刚进来的时候不知道，建议有志于提高码力的同学这样选）最后91分上岸</p><h2 id="数学分析1-（5学分）"><a href="#数学分析1-（5学分）" class="headerlink" title="数学分析1 （5学分）"></a>数学分析1 （5学分）</h2><p>大一数院的两名大课之一。总体学习难度比高等代数低，前几张比较难，有很多大的定理，后面导数和积分还是比较简单的，我的老师莫群上课比较慢，写的符号比较乱，所以上课不是在玩手机就是自己看看书。（但前几章我自己看有点吃力）虽然学习难度不是很大，但不知为啥考试的很多题我都做不出来，<del>绩点就不说了</del>.</p><h2 id="高等代数与解析几何1-（5学分）"><a href="#高等代数与解析几何1-（5学分）" class="headerlink" title="高等代数与解析几何1 （5学分）"></a>高等代数与解析几何1 （5学分）</h2><p>又一门大课……我们这一届改革把几何学和代数合在一起，其实学了之后发现确实有联系（解析几何里的一些性质都是用矩阵来描述）但教学过程一会教几何一会教代数就感觉很乱……这门课也是我大一上学的最吃力的一门（当然与上课经常摸鱼逃不开关系），里面有很多小的知识点，解题的时候也是计算量与思维并存，期中考前进行了较多的复习加上卷子比较简单拿了一个挺好的分数，期末考直接打回原形……最后绩点凄惨。</p>]]></content>
      
      
      <categories>
          
          <category> 回忆&amp;总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一次校赛回忆</title>
      <link href="/2022/05/23/%E4%B8%80%E6%AC%A1%E6%A0%A1%E8%B5%9B%E5%9B%9E%E5%BF%86/"/>
      <url>/2022/05/23/%E4%B8%80%E6%AC%A1%E6%A0%A1%E8%B5%9B%E5%9B%9E%E5%BF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="校赛回忆"><a href="#校赛回忆" class="headerlink" title="校赛回忆"></a>校赛回忆</h1><h3 id="前前言："><a href="#前前言：" class="headerlink" title="前前言："></a>前前言：</h3><p>个人是一个很爱记录的人，校赛打完先狂玩了两天，不写点什么东西不是我的风格，遂有了这篇文章。</p><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>这次组队过程可以说特别神奇。开赛前三个人都不认识，因为一些神奇的事情走到了一起。脑子一热不顾5月份堆积如山的ddl就报名了。既然报了名，那也就一起上贼船了喽。我先是东学学西学学，一抬头发现已经到了开赛的日期，于是硬着头皮就上了。</p><h3 id="正文（流水账警告）"><a href="#正文（流水账警告）" class="headerlink" title="正文（流水账警告）"></a>正文（<del>流水账警告</del>）</h3><p>原先看过去年的题目，不过今年的题目还是挺出乎我的意料。下面这个A题啥都没告诉我们，感觉基本没人选，好在这样就免去了选题的烦恼。<del>选择苦难症狂喜</del></p><p><img src="/2022/05/23/%E4%B8%80%E6%AC%A1%E6%A0%A1%E8%B5%9B%E5%9B%9E%E5%BF%86/1.png"></p><p>题目定下来只能硬着头皮上呗。B题出的十分新颖，让我对出题人充满敬意。看起来是个普通的TSP问题，但深究好像又有点奇怪。</p><p>在激烈的讨论很久以后，我们发现自己果然还是太菜了，本来想做一个TSP的变式却死活写不出code，最后只能妥协做一个简单的TSP，我写的代码大部分都是参考网上的轮子……</p><p>这样第一问算是完美“解决”了。剩下几问在我们的讨论下也初步有了方案（不得不承认线下讨论真的比线上高不知几倍……）</p><p>大家在丹青的洗衣房度过了愉（头）快（秃）的一晚上</p><img src="/2022/05/23/%E4%B8%80%E6%AC%A1%E6%A0%A1%E8%B5%9B%E5%9B%9E%E5%BF%86/2.png" style="zoom:33%;"><p>接下来的code 主要是由zmgg写的，突然发现这两次比赛队里都有一个MATLAB大佬来carry很多工作（顺便吐槽一下个人觉得MATLAB是一个很反人类的软件……界面丑不说，语法还十分蹩脚，当然只是个人观点……）</p><p>另外最让我们头疼的事就是提取题目发的PDF并去重，意想不到的是原先瞎学的pandas竟然神奇的派上了用处。一个人肝了将近一下午终于很完美的完成了这部分的任务，<del>让我高兴得忘记了吃饭</del>。</p><p>最后就是写论文了。粗心的我竟然记错了ddl，好在队友及时在某个教室把发呆的我拉回到现实。接着就是数模比赛的惯例，大家一起去北街熬了个夜，我依旧像上次一样，在同一家咖啡馆里，合着苦的直击心灵的茶，对着latex文档掉了一晚上头发。</p><img src="/2022/05/23/%E4%B8%80%E6%AC%A1%E6%A0%A1%E8%B5%9B%E5%9B%9E%E5%BF%86/3.png" style="zoom:33%;"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>回头来看，这次比赛相比寒假的美赛，少了一份热情，多了一份成熟。但还是收获颇丰。</p><p>首先是我找回了很久以前那种专注的状态，高中的时候经常能对着一个问题思考很久，还经常和人讨（争）论（吵）。上了大学以后遇到难的东西只期望互联网的某个角落能有我想要的答案。而在这次校赛期间，我们想了很多思路来做第一题（然后是不断的推翻），某天晚上我躺在床上准备睡觉的时候，脑子里突然有了灵感，遂赶紧爬起来写下来（虽然在之后又被推翻），总之我颇有点震惊于三个人居然能想出这么多点子，也发现自己原来还是有点用的（雾）。</p><p>另外还有很多想说的。比如发现似乎自己在组织这类讨论上似乎很有“天赋”，比如意识到以前瞎学的知识竟然有一天能发挥作用，比如认识了两个颇有趣的灵魂。</p><p><strong>青山依旧在，几度夕阳红</strong></p><p><strong>古今多少事，都付笑谈中</strong></p><p>——谨以此篇浅浅记录一段有趣的校赛经历。</p>]]></content>
      
      
      <categories>
          
          <category> 回忆&amp;总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TSP</title>
      <link href="/2022/05/14/TSP/"/>
      <url>/2022/05/14/TSP/</url>
      
        <content type="html"><![CDATA[<h1 id="TSP问题"><a href="#TSP问题" class="headerlink" title="TSP问题"></a>TSP问题</h1><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>旅行商问题（Travelling salesman problem），只在平面上给定一系列城市的坐标，有一个旅行商要从其中一个城市出发，经过所有城市后再回到起点。求问怎么走使总路程最短？</p><p>这个是图论里的著名问题，而且是NP-hard问题，一般会用各种启发式算法去寻找解（能最大概率地找到最优解）</p><p>我在数模建模的时候遇到了这个问题，下面选用<strong>遗传算法</strong> x <strong>Python</strong>来实现。</p><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>已知平面上有下列点，求问怎么走使总路程最短？</p><p><img src="/2022/05/14/TSP/%E6%97%A0%E8%B7%AF%E7%BA%BF%E6%95%A3%E7%82%B9.png"></p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/2022/05/14/TSP/%E6%9C%80%E7%BB%88%E8%B7%AF%E7%BA%BF.png"></p><p><strong>寻得的最佳路线是：</strong></p><p>1–&gt;4–&gt;6–&gt;5–&gt;3–&gt;2–&gt;11–&gt;10–&gt;9–&gt;8–&gt;7–&gt;1</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> floor</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#导入所需要的库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数据</span></span><br><span class="line"><span class="comment"># 这里加入了一个(0,0)为起点（最后也回到这个点）</span></span><br><span class="line">data = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">135.5</span>,<span class="number">30</span>,<span class="number">112.5</span>,<span class="number">30</span>,<span class="number">87.5</span>,</span><br><span class="line">    <span class="number">50</span>,<span class="number">112.5</span>,<span class="number">50</span>,<span class="number">87.5</span>,<span class="number">50</span>,<span class="number">37.5</span>,<span class="number">110</span>,<span class="number">62.5</span>,</span><br><span class="line">    <span class="number">190</span>,<span class="number">62.5</span>,<span class="number">190</span>,<span class="number">162.5</span>,<span class="number">190</span>,<span class="number">187.5</span>]).reshape(<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gena_TSP</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data,maxgen=<span class="number">300</span>,size_pop=<span class="number">200</span>,cross_prob=<span class="number">0.9</span>,pmuta_prob=<span class="number">0.01</span>,select_prob=<span class="number">0.8</span></span>):</span><br><span class="line">        self.maxgen = maxgen <span class="comment">#最大迭代次数</span></span><br><span class="line">        self.size_pop = size_pop  <span class="comment">#群体个数</span></span><br><span class="line">        self.cross_prob = cross_prob <span class="comment">#交叉概率</span></span><br><span class="line">        self.pmuta_prob = pmuta_prob <span class="comment">#变异概率</span></span><br><span class="line">        self.select_prob = select_prob <span class="comment">#选择概率</span></span><br><span class="line">        </span><br><span class="line">        self.data = data   <span class="comment">#城市的左边数据</span></span><br><span class="line">        self.num =<span class="built_in">len</span>(data) <span class="comment">#城市个数 对应染色体长度</span></span><br><span class="line">        </span><br><span class="line">        self.matrix_distance = self.matrix_dis() </span><br><span class="line">       <span class="comment">#距离矩阵n*n, 第[i,j]个元素表示城市i到j距离matrix_dis函数见下文</span></span><br><span class="line">        </span><br><span class="line">        self.select_num = <span class="built_in">max</span>(floor(self.size_pop*self.select_prob+<span class="number">0.5</span>),<span class="number">2</span>) </span><br><span class="line">       <span class="comment">#通过选择概率确定子代的选择个数</span></span><br><span class="line"></span><br><span class="line">        self.chrom = np.array([<span class="number">0</span>]*self.size_pop*self.num).reshape(self.size_pop,self.num)</span><br><span class="line">        self.sub_sel = np.array([<span class="number">0</span>]*self.select_num*self.num).reshape(self.select_num,self.num)</span><br><span class="line">        <span class="comment">#父代和子代群体的初始化（不直接用np.zeros是为了保证单个染色体的编码为整数，np.zeros对应的数据类型为浮点型）   </span></span><br><span class="line">        </span><br><span class="line">        self.fitness = np.zeros(self.size_pop)</span><br><span class="line">        <span class="comment">#存储群体中每个染色体的路径总长度，对应单个染色体的适应度就是其倒数</span></span><br><span class="line"></span><br><span class="line">        self.best_fit = []</span><br><span class="line">        self.best_path= []</span><br><span class="line">        <span class="comment">#保存每一步的群体的最优路径和距离</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">matrix_dis</span>(<span class="params">self</span>):</span><br><span class="line">        res = np.zeros((self.num,self.num))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.num):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,self.num):</span><br><span class="line">                res[i,j] = np.linalg.norm(self.data[i,:]-self.data[j,:])</span><br><span class="line">                res[j,i] = res[i,j]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rand_chrom</span>(<span class="params">self</span>):</span><br><span class="line">            rand_ch = np.array(<span class="built_in">range</span>(self.num))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size_pop):</span><br><span class="line">                np.random.shuffle(rand_ch)</span><br><span class="line">                self.chrom[i,:]= rand_ch</span><br><span class="line">                self.fitness[i] = self.comp_fit(rand_ch)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算单个染色体的路径距离值，可利用该函数更新self.fittness</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">comp_fit</span>(<span class="params">self, one_path</span>):</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.num-<span class="number">1</span>):</span><br><span class="line">            res += self.matrix_distance[one_path[i],one_path[i+<span class="number">1</span>]]</span><br><span class="line">        res += self.matrix_distance[one_path[-<span class="number">1</span>],one_path[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">out_path</span>(<span class="params">self, one_path</span>):</span><br><span class="line">        res = <span class="built_in">str</span>(one_path[<span class="number">0</span>]+<span class="number">1</span>)+<span class="string">&#x27;--&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.num):</span><br><span class="line">            res += <span class="built_in">str</span>(one_path[i]+<span class="number">1</span>)+<span class="string">&#x27;--&gt;&#x27;</span></span><br><span class="line">        res += <span class="built_in">str</span>(one_path[<span class="number">0</span>]+<span class="number">1</span>)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_sub</span>(<span class="params">self</span>):</span><br><span class="line">        fit = <span class="number">1.</span>/(self.fitness) <span class="comment">#适应度函数</span></span><br><span class="line">        cumsum_fit = np.cumsum(fit)</span><br><span class="line">        pick = cumsum_fit[-<span class="number">1</span>]/self.select_num*(np.random.rand()+np.array(<span class="built_in">range</span>(self.select_num)))</span><br><span class="line">        i,j = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        index = []</span><br><span class="line">        <span class="keyword">while</span> i&lt;self.size_pop <span class="keyword">and</span> j&lt;self.select_num:</span><br><span class="line">            <span class="keyword">if</span> cumsum_fit[i]&gt;= pick[j]:</span><br><span class="line">                index.append(i)</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        self.sub_sel = self.chrom[index,:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cross_sub</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">if</span> self.select_num%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                num = <span class="built_in">range</span>(<span class="number">0</span>,self.select_num,<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num = <span class="built_in">range</span>(<span class="number">0</span>,self.select_num-<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">                <span class="keyword">if</span> self.cross_prob&gt;=np.random.rand():</span><br><span class="line">                    self.sub_sel[i,:],self.sub_sel[i+<span class="number">1</span>,:] = self.intercross(self.sub_sel[i,:],self.sub_sel[i+<span class="number">1</span>,:])</span><br><span class="line">                    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intercross</span>(<span class="params">self,ind_a,ind_b</span>):</span><br><span class="line">                r1 = np.random.randint(self.num)</span><br><span class="line">                r2 = np.random.randint(self.num)</span><br><span class="line">                <span class="keyword">while</span> r2 == r1:</span><br><span class="line">                    r2 = np.random.randint(self.num)</span><br><span class="line">                left,right = <span class="built_in">min</span>(r1,r2),<span class="built_in">max</span>(r1,r2)</span><br><span class="line">                ind_a1 = ind_a.copy()</span><br><span class="line">                ind_b1 = ind_b.copy()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left,right+<span class="number">1</span>):</span><br><span class="line">                    ind_a2 = ind_a.copy()</span><br><span class="line">                    ind_b2 = ind_b.copy()</span><br><span class="line">                    ind_a[i] = ind_b1[i] </span><br><span class="line">                    ind_b[i] = ind_a1[i]</span><br><span class="line">                    x = np.argwhere(ind_a==ind_a[i])</span><br><span class="line">                    y = np.argwhere(ind_b==ind_b[i])</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(x) == <span class="number">2</span>:</span><br><span class="line">                        ind_a[x[x!=i]] = ind_a2[i]</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(y) == <span class="number">2</span>:</span><br><span class="line">                        ind_b[y[y!=i]] = ind_b2[i]</span><br><span class="line">                <span class="keyword">return</span> ind_a,ind_b</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mutation_sub</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.select_num):</span><br><span class="line">            <span class="keyword">if</span> np.random.rand() &lt;= self.cross_prob:</span><br><span class="line">                r1 = np.random.randint(self.num)</span><br><span class="line">                r2 = np.random.randint(self.num)</span><br><span class="line">                <span class="keyword">while</span> r2 == r1:</span><br><span class="line">                    r2 = np.random.randint(self.num)</span><br><span class="line">                self.sub_sel[i,[r1,r2]] = self.sub_sel[i,[r2,r1]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse_sub</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.select_num):</span><br><span class="line">            r1 = np.random.randint(self.num)</span><br><span class="line">            r2 = np.random.randint(self.num)</span><br><span class="line">            <span class="keyword">while</span> r2 == r1:</span><br><span class="line">                r2 = np.random.randint(self.num)</span><br><span class="line">            left,right = <span class="built_in">min</span>(r1,r2),<span class="built_in">max</span>(r1,r2)</span><br><span class="line">            sel = self.sub_sel[i,:].copy()</span><br><span class="line">            </span><br><span class="line">            sel[left:right+<span class="number">1</span>] = self.sub_sel[i,left:right+<span class="number">1</span>][::-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> self.comp_fit(sel) &lt; self.comp_fit(self.sub_sel[i,:]):</span><br><span class="line">                self.sub_sel[i,:] = sel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reins</span>(<span class="params">self</span>):</span><br><span class="line">        index = np.argsort(self.fitness)[::-<span class="number">1</span>]</span><br><span class="line">        self.chrom[index[:self.select_num],:] = self.sub_sel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">data</span>):</span><br><span class="line">    Path_short = Gena_TSP(data) <span class="comment">#根据位置坐标，生成一个遗传算法类</span></span><br><span class="line">    Path_short.rand_chrom()  <span class="comment">#初始化父类</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">#循环迭代遗传过程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Path_short.maxgen):</span><br><span class="line">        Path_short.select_sub()   <span class="comment">#选择子代</span></span><br><span class="line">        Path_short.cross_sub()    <span class="comment">#交叉</span></span><br><span class="line">        Path_short.mutation_sub() <span class="comment">#变异</span></span><br><span class="line">        Path_short.reverse_sub()  <span class="comment">#进化逆转</span></span><br><span class="line">        Path_short.reins()        <span class="comment">#子代插入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#重新计算新群体的距离值</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Path_short.size_pop):</span><br><span class="line">            Path_short.fitness[j] = Path_short.comp_fit(Path_short.chrom[j,:])</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#每隔一百步显示当前群体的最优路径</span></span><br><span class="line">        index = Path_short.fitness.argmin()</span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&#x27;步后的最短的路程: &#x27;</span>+<span class="built_in">str</span>( Path_short.fitness[index]))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&#x27;步后的最优路径:&#x27;</span>)</span><br><span class="line">            Path_short.out_path(Path_short.chrom[index,:])<span class="comment"># 显示每一步的最优路径</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#存储每一步的最优路径及距离</span></span><br><span class="line">        Path_short.best_fit.append(Path_short.fitness[index])</span><br><span class="line">        Path_short.best_path.append(Path_short.chrom[index,:])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 绘制初始化的路径图</span></span><br><span class="line">    fig,ax=plt.subplots()</span><br><span class="line">    x = data[:,<span class="number">0</span>]</span><br><span class="line">    y = data[:,<span class="number">1</span>]</span><br><span class="line">    plt.xlim(<span class="number">0</span>,<span class="number">300</span>)</span><br><span class="line">    plt.ylim(<span class="number">0</span>,<span class="number">200</span>)</span><br><span class="line">    plt.xticks([<span class="number">0</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">60</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">120</span>,<span class="number">140</span>,<span class="number">160</span>,<span class="number">180</span>,<span class="number">200</span>,<span class="number">220</span>,<span class="number">240</span>,<span class="number">260</span>,<span class="number">280</span>,<span class="number">300</span>])</span><br><span class="line">    plt.yticks([<span class="number">0</span>,<span class="number">25</span>,<span class="number">50</span>,<span class="number">75</span>,<span class="number">100</span>,<span class="number">125</span>,<span class="number">150</span>,<span class="number">175</span>,<span class="number">200</span>,<span class="number">225</span>,<span class="number">250</span>,<span class="number">275</span>,<span class="number">300</span>])</span><br><span class="line">    ax.scatter(x, y,linewidths=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">for</span> i,txt <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(data)+<span class="number">1</span>)):</span><br><span class="line">        ax.annotate(txt,(x[i],y[i]))</span><br><span class="line">    res0 = Path_short.chrom[<span class="number">0</span>]</span><br><span class="line">    x0 = x[res0]</span><br><span class="line">    y0 = y[res0]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-<span class="number">1</span>):</span><br><span class="line">        plt.quiver(x0[i], y0[i],x0[i+<span class="number">1</span>]-x0[i], y0[i+<span class="number">1</span>]-y0[i], color=<span class="string">&#x27;r&#x27;</span>, width=<span class="number">0.005</span>,angles=<span class="string">&#x27;xy&#x27;</span>,scale=<span class="number">1</span>, scale_units=<span class="string">&#x27;xy&#x27;</span>)  </span><br><span class="line">    plt.quiver(x0[-<span class="number">1</span>], y0[-<span class="number">1</span>],x0[<span class="number">0</span>]-x0[-<span class="number">1</span>], y0[<span class="number">0</span>]-y0[-<span class="number">1</span>], color=<span class="string">&#x27;r&#x27;</span>, width=<span class="number">0.005</span>,angles=<span class="string">&#x27;xy&#x27;</span>,scale=<span class="number">1</span>, scale_units=<span class="string">&#x27;xy&#x27;</span>)</span><br><span class="line">    plt.grid()</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># print(&#x27;初始染色体的路程: &#x27;+str( Path_short.fitness[0]))</span></span><br><span class="line">    <span class="keyword">return</span> Path_short  <span class="comment">#返回遗传算法结果类</span></span><br><span class="line"></span><br><span class="line">main(data)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AI画图</title>
      <link href="/2022/05/08/AI%E7%94%BB%E5%9B%BE/"/>
      <url>/2022/05/08/AI%E7%94%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="AI-艺术家"><a href="#AI-艺术家" class="headerlink" title="AI 艺术家"></a>AI 艺术家</h1><p>What can AI do? 今天就来介绍一个AI画图的程序“<strong>Disco Diffusion</strong>“.</p><h3 id="用法-amp-原理"><a href="#用法-amp-原理" class="headerlink" title="用法&amp;原理"></a>用法&amp;原理</h3><p>简单来说，只要你输入一句英文，Disco 就会根据你的描述来生成一张图片。</p><p><strong>原理</strong>：Disco 根据描述寻找大量的相关图片通过GAN等DL算法渲染出图片。</p><h3 id="部署问题"><a href="#部署问题" class="headerlink" title="部署问题"></a>部署问题</h3><p>Disco 目前有Google Colab的版本，即完全部署在云端，不受本地显卡质量限制，也不需要繁琐的cuda配置。<del>（但需要跨过那个不存在的墙）</del></p><p>为了运行程序，还需要Google账号，但自从Google大部分退出中国后也ban了中国用户注册Google账号，需要某些玄学方法or万能tb。</p><p>Google colab 提供了免费的显卡，大部分时间我分配到的都是Tesla V100 or K80（最近在跑的MNIST也是部署在colab上的）</p><h3 id="一起来欣赏一些AI画出来的图片吧"><a href="#一起来欣赏一些AI画出来的图片吧" class="headerlink" title="一起来欣赏一些AI画出来的图片吧~"></a>一起来欣赏一些AI画出来的图片吧~</h3><p><img src="/2022/05/08/AI%E7%94%BB%E5%9B%BE/1.png"></p><p>（a beautiful painting of Chinese Shanshui landscape, clouds, ink style, trending on artstation）</p><p><img src="/2022/05/08/AI%E7%94%BB%E5%9B%BE/4.png"></p><p>A beautiful painting of a <strong>starry night</strong>, shining its light across a <strong>sunflower sea</strong> by <strong>James Gurney</strong>, Trending on artstation</p><p><img src="/2022/05/08/AI%E7%94%BB%E5%9B%BE/5.png"></p><p>同上</p><p><img src="/2022/05/08/AI%E7%94%BB%E5%9B%BE/2.png"></p><p><img src="/2022/05/08/AI%E7%94%BB%E5%9B%BE/3.png"></p><p>A beautiful painting of a singular lighthouse</p><h3 id="更上一层楼"><a href="#更上一层楼" class="headerlink" title="更上一层楼"></a>更上一层楼</h3><p>AI画图的一个特点就是会产生一些人类想不到的地方（就像当年Alphago对阵李世石的那摸不着头脑的一手棋），一些画师开始尝试在AI画出来的图上进行修改，来产出新的作品。在我看来，AI要做的，不是代替，而是协助。</p><p><strong>PS</strong>：如果你有好的idea，欢迎联系我跑一跑，说不定就是下一张壁纸了呢。</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>knn</title>
      <link href="/2022/05/08/knn/"/>
      <url>/2022/05/08/knn/</url>
      
        <content type="html"><![CDATA[<h1 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h1><h3 id="my-work"><a href="#my-work" class="headerlink" title="my work"></a>my work</h3><p>输入一个点的坐标（以空格分割），能预测他的贫富度，并标出来显示在图上。</p><h3 id="some-problems"><a href="#some-problems" class="headerlink" title="some problems"></a>some problems</h3><ol><li><p>为什么把n_neighbors设为20？不是说要设成奇数吗？（这里分四类，无所谓了）</p></li><li><p>画图的时候为什么要搞个底色啊（我感觉底色跟点明明对应不上啊，有啥用啊）（竺佬说画图的时候出了点小问题）</p></li></ol><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>运行时别忘了改读取时的文件路径名</p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><img src="/2022/05/08/knn/1.png" style="zoom:67%;"><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> math </span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier, KNeighborsRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入一个点：&quot;</span>)</span><br><span class="line">a,b=<span class="built_in">map</span>(<span class="built_in">float</span>,<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line">column_names = [<span class="string">&#x27;CRIM&#x27;</span>, <span class="string">&#x27;ZN&#x27;</span>, <span class="string">&#x27;INDUS&#x27;</span>, <span class="string">&#x27;CHAS&#x27;</span>, <span class="string">&#x27;NOX&#x27;</span>, <span class="string">&#x27;RM&#x27;</span>, <span class="string">&#x27;AGE&#x27;</span>, <span class="string">&#x27;DIS&#x27;</span>, <span class="string">&#x27;RAD&#x27;</span>, <span class="string">&#x27;TAX&#x27;</span>, <span class="string">&#x27;PTRATIO&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;LSTAT&#x27;</span>, <span class="string">&#x27;MEDV&#x27;</span>]</span><br><span class="line">data = np.array(pd.read_csv(<span class="string">&#x27;D:\cs\EAIcourse\\03KNN/Boston.csv&#x27;</span>, index_col=<span class="number">0</span>))</span><br><span class="line">X = data[: , [<span class="number">2</span>, <span class="number">5</span>]]    <span class="comment">#取了第二行和第五行</span></span><br><span class="line">y = data[: , <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选定K值</span></span><br><span class="line">n_neighbors = <span class="number">21</span> <span class="comment"># 改成了奇数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置标签</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_label</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span> &lt; <span class="number">10.0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">input</span> &lt; <span class="number">20</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">input</span> &lt; <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># change the `MEDV` column data into label</span></span><br><span class="line">vfunc = np.vectorize(make_label)</span><br><span class="line">label = vfunc(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把标签和数据合并</span></span><br><span class="line">label=np.array(label).transpose()</span><br><span class="line">Z=np.c_[X,label]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选一个点，输入坐标</span></span><br><span class="line">test_input_to_predict = np.array([a,b]) <span class="comment"># define a point to predict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出他的label</span></span><br><span class="line">neighbor_list = <span class="built_in">sorted</span>(Z, key=<span class="keyword">lambda</span> x :<span class="built_in">abs</span>(x[<span class="number">0</span>]-test_input_to_predict[<span class="number">0</span>])+<span class="built_in">abs</span>(x[<span class="number">1</span>]-test_input_to_predict[<span class="number">1</span>])) <span class="comment"># write your own key function to find test input&#x27;s neighbors</span></span><br><span class="line"><span class="comment">#用的是曼哈顿距离</span></span><br><span class="line"><span class="comment"># n_neighbors就是k值</span></span><br><span class="line">K_nearest_neighbors = neighbor_list[: n_neighbors]  <span class="comment"># 按距离排序后选前K个</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(K_nearest_neighbors)):</span><br><span class="line">    K_nearest_neighbors[i]=K_nearest_neighbors[i][<span class="number">2</span>]</span><br><span class="line">counter = collections.Counter(K_nearest_neighbors)  <span class="comment"># 在前K个里面投票</span></span><br><span class="line">res=counter.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(res)     <span class="comment">#选票数最多的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">clf = KNeighborsClassifier(n_neighbors, weights=<span class="string">&quot;distance&quot;</span>)</span><br><span class="line">clf.fit(X, label)</span><br><span class="line">cmap_light = ListedColormap([<span class="string">&quot;salmon&quot;</span>, <span class="string">&quot;cornflowerblue&quot;</span>, <span class="string">&quot;limegreen&quot;</span>, <span class="string">&quot;orange&quot;</span>])</span><br><span class="line">cmap_bold = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>,  <span class="string">&quot;orange&quot;</span>]</span><br><span class="line">income_level = [<span class="string">&quot;poor&quot;</span>, <span class="string">&#x27;enough&#x27;</span>, <span class="string">&#x27;median&#x27;</span>, <span class="string">&#x27;rich&#x27;</span>]</span><br><span class="line">h = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *plotting section, you do not need to pay attention</span></span><br><span class="line"><span class="comment"># Plot the decision boundary. </span></span><br><span class="line"><span class="comment"># For that, we will assign a color to each grid-point in total 2D area</span></span><br><span class="line"><span class="comment"># This is done by K-Means model predict, see how model split the 2D space</span></span><br><span class="line">x_min, x_max = X[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">y_min, y_max = X[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))</span><br><span class="line">Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line">Z = Z.reshape(xx.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *you don&#x27;t need pay attention: plotting section</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">plt.contourf(xx, yy, Z, cmap=cmap_light) <span class="comment"># 控制图片底色</span></span><br><span class="line">sns.scatterplot(</span><br><span class="line">    x=X[:, <span class="number">0</span>],</span><br><span class="line">    y=X[:, <span class="number">1</span>],</span><br><span class="line">    hue=np.array(income_level)[label],</span><br><span class="line">    palette=cmap_bold,</span><br><span class="line">    alpha=<span class="number">1.0</span>,</span><br><span class="line">    edgecolor=<span class="string">&quot;black&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.xlim(xx.<span class="built_in">min</span>(), xx.<span class="built_in">max</span>())</span><br><span class="line">plt.ylim(yy.<span class="built_in">min</span>(), yy.<span class="built_in">max</span>())</span><br><span class="line">plt.title(</span><br><span class="line">    <span class="string">&quot;4-Class classifiction by INDUS and NOX (k = %i, weights = distance)&quot;</span> % (n_neighbors)</span><br><span class="line">)</span><br><span class="line">plt.xlabel(<span class="string">&quot;INDUS&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;NOX&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来我会在图里把预测的点标出来</span></span><br><span class="line">plt.scatter(test_input_to_predict[<span class="number">0</span>],test_input_to_predict[<span class="number">1</span>],marker=<span class="string">&#x27;*&#x27;</span>,c=<span class="string">&#x27;red&#x27;</span>,s=<span class="number">200</span>)</span><br><span class="line">plt.text(test_input_to_predict[<span class="number">0</span>],test_input_to_predict[<span class="number">1</span>],<span class="built_in">str</span>(income_level[<span class="built_in">int</span>(res)]))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
